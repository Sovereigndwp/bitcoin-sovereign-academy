(function () {
  'use strict';

  class IntelligenceDashboard {
    constructor(client) {
      this.client = client;
      this.elements = {};
      this.refreshInterval = 180_000; // 3 minutes
      this.timer = null;

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initialize());
      } else {
        this.initialize();
      }
    }

    initialize() {
      this.cacheElements();
      this.refresh();
      this.setupAutoRefresh();
      this.registerConnectionEvents();
    }

    cacheElements() {
      this.elements = {
        summary: document.getElementById('summary-content'),
        summaryWrapper: document.getElementById('intelligence-summary'),
        alerts: document.getElementById('security-alerts'),
        opportunities: document.getElementById('edu-opportunities'),
        market: document.getElementById('market-data'),
        loadingOverlay: document.getElementById('loading-overlay'),
        loadingMessage: document.getElementById('loading-message')
      };
    }

    setupAutoRefresh() {
      this.timer = setInterval(() => this.refresh(), this.refreshInterval);
    }

    registerConnectionEvents() {
      if (!this.client || typeof this.client.on !== 'function') return;

      this.client.on('connected', () => this.refresh(true));
    }

    async refresh(force = false) {
      if (!this.client) {
        console.warn('MCP client unavailable; using fallback intelligence');
        this.renderIntelligence(this.getFallbackIntelligence());
        return;
      }

      if (force) {
        this.client.clearCache?.();
      }

      this.showLoadingState();

      try {
        const [intelligence, price] = await Promise.all([
          this.client.getIntelligenceSummary(),
          this.client.getBitcoinPrice()
        ]);

        this.renderIntelligence(intelligence, price);
      } catch (error) {
        console.error('Failed to refresh intelligence:', error);
        this.renderIntelligence(this.getFallbackIntelligence());
      } finally {
        this.hideLoadingState();
      }
    }

    renderIntelligence(intelligence, price) {
      if (!intelligence) return;
      this.renderSummary(intelligence, price);
      this.renderAlerts(intelligence.criticalAlerts || []);
      this.renderOpportunities(intelligence.educationalOpportunities || []);
      this.renderMarket(intelligence.marketIntelligence || [], price);
    }

    renderSummary(intelligence, price) {
      if (!this.elements.summary) return;
      const total = intelligence.totalAlerts || 0;
      const updatedAt = intelligence.lastUpdated
        ? new Date(intelligence.lastUpdated).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        : 'recently';

      const priceBlock = price && price.usd
        ? `<div class="summary-stat">
             <span class="label">Spot price</span>
             <strong>${this.formatPrice(price.usd)}</strong>
             <span class="sub">24h ${this.formatChange(price.change24h)}</span>
           </div>`
        : '';

      this.elements.summary.innerHTML = `
        <div class="summary-grid">
          <div class="summary-stat">
            <span class="label">Active alerts</span>
            <strong>${total}</strong>
            <span class="sub">Updated ${updatedAt}</span>
          </div>
          <div class="summary-stat">
            <span class="label">Learning prompts</span>
            <strong>${(intelligence.educationalOpportunities || []).length}</strong>
            <span class="sub">Generated by MCP agents</span>
          </div>
          ${priceBlock}
        </div>
      `;
    }

    renderAlerts(alerts) {
      if (!this.elements.alerts) return;
      if (!alerts.length) {
        this.elements.alerts.innerHTML = '<p>No current security alerts.</p>';
        return;
      }

      const html = alerts
        .map((alert) => `
          <div class="alert-card ${alert.severity || 'info'}">
            <header>
              <strong>${alert.title || 'Security alert'}</strong>
              <span>${alert.severity ? alert.severity.toUpperCase() : 'INFO'}</span>
            </header>
            <p>${alert.description || alert.details || 'Review the alert details in your dashboard.'}</p>
            ${alert.recommendation ? `<footer>${alert.recommendation}</footer>` : ''}
          </div>
        `)
        .join('');

      this.elements.alerts.innerHTML = html;
    }

    renderOpportunities(opps) {
      if (!this.elements.opportunities) return;
      if (!opps.length) {
        this.elements.opportunities.innerHTML = '<p>No new recommendations. Generate a course to unlock fresh content.</p>';
        return;
      }

      const html = opps
        .map((opp) => `
          <div class="opportunity">
            <strong>${opp.title || 'Learning opportunity'}</strong>
            <p>${opp.summary || opp.description || 'Explore this topic to deepen your understanding.'}</p>
            ${opp.source ? `<span class="source">Source: ${opp.source}</span>` : ''}
          </div>
        `)
        .join('');

      this.elements.opportunities.innerHTML = html;
    }

    renderMarket(items, price) {
      if (!this.elements.market) return;

      const list = items && items.length
        ? items.map((item) => `
            <div class="market-item ${item.sentiment || 'neutral'}">
              <strong>${item.title || 'Market insight'}</strong>
              <p>${item.summary || item.description || 'Monitor market developments to stay informed.'}</p>
              ${item.sentiment ? `<span class="sentiment">${item.sentiment}</span>` : ''}
            </div>
          `).join('')
        : '<p>No market intelligence available right now.</p>';

      const change = price ? this.formatChange(price.change24h) : '';

      this.elements.market.innerHTML = `
        <div class="market-header">
          <span>24h Performance</span>
          <strong>${change}</strong>
        </div>
        ${list}
      `;
    }

    formatPrice(value) {
      const num = Number(value);
      if (!Number.isFinite(num)) return value;
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        maximumFractionDigits: 0
      }).format(num);
    }

    formatChange(value) {
      const num = Number(value || 0);
      const prefix = num > 0 ? '+' : '';
      return `${prefix}${num.toFixed(2)}%`;
    }

    showLoadingState() {
      if (this.elements.summaryWrapper) {
        this.elements.summaryWrapper.classList.add('loading');
      }
    }

    hideLoadingState() {
      if (this.elements.summaryWrapper) {
        this.elements.summaryWrapper.classList.remove('loading');
      }
    }

    getFallbackIntelligence() {
      if (this.client && typeof this.client.getFallbackIntelligence === 'function') {
        return this.client.getFallbackIntelligence();
      }

      return {
        totalAlerts: 0,
        criticalAlerts: [],
        educationalOpportunities: [
          { title: 'Review multisig security models', summary: 'Compare 2-of-3 and 3-of-5 custody trade-offs.' }
        ],
        marketIntelligence: [
          { title: 'Bitcoin adoption update', sentiment: 'positive', summary: 'Lightning payments volume rising in LatAm.' }
        ],
        lastUpdated: new Date().toISOString()
      };
    }
  }

  const dashboard = new IntelligenceDashboard(window.mcpClient);
  window.updateIntelligence = () => dashboard.refresh(true);
})();
