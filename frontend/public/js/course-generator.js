(function () {
  'use strict';

  const STORAGE_KEY = 'bitcoinAcademyCourses';

  class CourseGenerator {
    constructor(client) {
      this.client = client;
      this.courses = [];
      this.elements = {};

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initialize());
      } else {
        this.initialize();
      }
    }

    initialize() {
      this.cacheElements();
      this.loadPersistedCourses();
      this.renderCourses();
    }

    cacheElements() {
      this.elements = {
        container: document.getElementById('generated-courses'),
        topicSelect: document.getElementById('course-topic'),
        levelSelect: document.getElementById('course-level'),
        loadingOverlay: document.getElementById('loading-overlay'),
        loadingMessage: document.getElementById('loading-message')
      };
    }

    loadPersistedCourses() {
      try {
        const stored = localStorage.getItem(STORAGE_KEY);
        if (stored) {
          this.courses = JSON.parse(stored);
        }
      } catch (error) {
        console.warn('Failed to load stored courses:', error);
      }
    }

    persistCourses() {
      try {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(this.courses));
      } catch (error) {
        console.warn('Failed to persist courses:', error);
      }
    }

    async generateCourse() {
      const topic = this.elements.topicSelect?.value || 'fundamentals';
      const level = this.elements.levelSelect?.value || 'beginner';

      this.showLoading('Generating personalized course...');

      try {
        const course = this.client
          ? await this.client.generateCourse({ topic, level })
          : this.getFallbackCourse({ topic, level });

        const enhancedCourse = this.enrichCourse(course, topic, level);
        this.courses.unshift(enhancedCourse);
        this.persistCourses();
        this.renderCourses();
      } catch (error) {
        console.error('Failed to generate course:', error);
        this.showError('Unable to generate course right now. Please try again later.');
      } finally {
        this.hideLoading();
      }
    }

    enrichCourse(course, topic, level) {
      const now = new Date().toISOString();
      return {
        id: course.id || `${topic}-${Date.now()}`,
        title: course.title || this.formatTitle(topic, level),
        description: course.description || 'Generated by Bitcoin MCP agents.',
        modules: Array.isArray(course.modules) ? course.modules : [],
        duration: course.duration || course.estimated_duration || '3 hours',
        difficulty: course.difficulty || level,
        generatedAt: now,
        topic
      };
    }

    renderCourses() {
      if (!this.elements.container) return;

      if (!this.courses.length) {
        this.elements.container.innerHTML = `
          <div class="course-placeholder">
            <p>Generate your first AI-powered course to get started!</p>
          </div>
        `;
        return;
      }

      this.elements.container.innerHTML = this.courses
        .map((course, index) => this.renderCourseCard(course, index))
        .join('');

      this.attachCourseInteractions();
    }

    renderCourseCard(course, index) {
      const moduleItems = (course.modules || [])
        .map((module, moduleIndex) => {
          if (typeof module === 'string') {
            return `<li><strong>Module ${moduleIndex + 1}:</strong> ${module}</li>`;
          }

          const lessons = (module.lessons || module.topics || [])
            .map((lesson) => `<li>${lesson}</li>`)
            .join('');

          return `
            <li class="course-module">
              <header>
                <strong>${module.title || `Module ${moduleIndex + 1}`}</strong>
                <span class="module-duration">${module.duration || ''}</span>
              </header>
              ${module.description ? `<p>${module.description}</p>` : ''}
              ${lessons ? `<ul class="module-lessons">${lessons}</ul>` : ''}
            </li>
          `;
        })
        .join('');

      return `
        <article class="course-card" data-course-id="${course.id}" data-index="${index}">
          <header class="course-header">
            <div>
              <h3>${course.title}</h3>
              <p class="course-meta">${this.capitalize(course.difficulty)} • ${course.duration}</p>
            </div>
            <button class="course-toggle" aria-expanded="${index === 0 ? 'true' : 'false'}">${index === 0 ? 'Hide' : 'View'} outline</button>
          </header>
          <p class="course-description">${course.description}</p>
          <section class="course-outline ${index === 0 ? 'expanded' : ''}">
            <h4>Course Outline</h4>
            <ul>${moduleItems || '<li>Modules will be generated during your first session.</li>'}</ul>
          </section>
          <footer class="course-footer">
            <span>Generated ${this.formatRelativeTime(course.generatedAt)}</span>
            <button class="course-export" data-course-id="${course.id}">Save outline</button>
          </footer>
        </article>
      `;
    }

    attachCourseInteractions() {
      this.elements.container.querySelectorAll('.course-toggle').forEach((toggle) => {
        toggle.addEventListener('click', () => {
          const card = toggle.closest('.course-card');
          const outline = card?.querySelector('.course-outline');
          if (!outline) return;

          const isExpanded = outline.classList.toggle('expanded');
          toggle.textContent = isExpanded ? 'Hide outline' : 'View outline';
          toggle.setAttribute('aria-expanded', String(isExpanded));
        });
      });

      this.elements.container.querySelectorAll('.course-export').forEach((button) => {
        button.addEventListener('click', () => {
          const id = button.dataset.courseId;
          const course = this.courses.find((c) => c.id === id);
          if (!course) return;
          this.downloadCourseOutline(course);
        });
      });
    }

    downloadCourseOutline(course) {
      const blob = new Blob([this.serializeCourse(course)], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${course.title.replace(/\s+/g, '-').toLowerCase()}-outline.md`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }

    serializeCourse(course) {
      const modules = (course.modules || [])
        .map((module, index) => {
          if (typeof module === 'string') {
            return `- Module ${index + 1}: ${module}`;
          }

          const lessons = (module.lessons || module.topics || [])
            .map((lesson) => `    - ${lesson}`)
            .join('\n');

          return `- ${module.title || `Module ${index + 1}`}${module.description ? ` – ${module.description}` : ''}\n${lessons}`;
        })
        .join('\n');

      return `# ${course.title}\n\nDifficulty: ${this.capitalize(course.difficulty)}\nDuration: ${course.duration}\nTopic: ${this.capitalize(course.topic)}\n\n${course.description}\n\n## Outline\n${modules}`;
    }

    showError(message) {
      if (!this.elements.container) return;
      this.elements.container.insertAdjacentHTML('afterbegin', `<div class="course-error">${message}</div>`);
      setTimeout(() => {
        const error = this.elements.container.querySelector('.course-error');
        if (error) {
          error.remove();
        }
      }, 4000);
    }

    showLoading(message) {
      if (!this.elements.loadingOverlay) return;
      if (this.elements.loadingMessage && message) {
        this.elements.loadingMessage.textContent = message;
      }
      this.elements.loadingOverlay.classList.add('active');
    }

    hideLoading() {
      if (!this.elements.loadingOverlay) return;
      this.elements.loadingOverlay.classList.remove('active');
    }

    formatTitle(topic, level) {
      return `${this.capitalize(level)} ${this.capitalize(topic.replace(/-/g, ' '))}`;
    }

    formatRelativeTime(timestamp) {
      if (!timestamp) return 'just now';
      const delta = Date.now() - new Date(timestamp).getTime();
      if (delta < 60_000) return 'just now';
      if (delta < 3_600_000) return `${Math.floor(delta / 60_000)} min ago`;
      if (delta < 86_400_000) return `${Math.floor(delta / 3_600_000)} hr ago`;
      const days = Math.floor(delta / 86_400_000);
      return days === 1 ? '1 day ago' : `${days} days ago`;
    }

    capitalize(value = '') {
      if (!value) return '';
      return value.charAt(0).toUpperCase() + value.slice(1);
    }

    getFallbackCourse({ topic, level }) {
      if (this.client && typeof this.client.getFallbackCourse === 'function') {
        return this.client.getFallbackCourse({ topic, level });
      }
      return {
        title: 'Bitcoin Fundamentals',
        description: 'Master Bitcoin basics from first principles.',
        modules: [
          'What problem does Bitcoin solve?',
          'How the blockchain stays secure',
          'Ways to custody your bitcoin'
        ],
        duration: '3 hours',
        difficulty: level
      };
    }
  }

  const courseGenerator = new CourseGenerator(window.mcpClient);
  window.generateNewCourse = () => courseGenerator.generateCourse();
})();
